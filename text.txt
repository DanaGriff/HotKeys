import tkinter as tk
from tkinter import ttk
import keyboard
import sys
import json
import os
from tkinter.ttk import Frame, Button, Label, Style, Entry



data = ""
snippets = ""
snippetsMap = {}

class UI(Frame):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        self.master.title('Auto Snippet')
        self.master.resizable(False, False)

        ##set window position
        self.master.geometry(set_window_size())

        add_button = Button(self.master,
                            command=add_button_clicked,
                            text="Add")
        add_button.place(x=20,y=20)

        ##Button(root, text='Save', command=save_button_clicked).pack()
       ## Button(root, text='Add', command=add_button_clicked).pack()
        ##Button(root, text='Remove', command=remove_button_clicked).pack()
        Label(root, text='A Label with the Helvetica font', font=("Helvetica", 14)).pack()

        signin = Frame(root)
        signin.pack(padx=10, pady=10, fill='x', expand=True)

        snippet_label = Label(signin, text="Snippet:")
        snippet_label.pack(fill='x', expand=True)

        snippet_text = tk.Text(signin, height=5, width=30)
        snippet_text.pack(fill='x', expand=True)
        snippet_text.focus()

        abbreviation_label = Label(signin, text="Abbreviation:")
        abbreviation_label.pack(fill='x', expand=True)

        abbreviation_entry = Entry(signin, textvariable="text1")
        abbreviation_entry.pack(fill='x', expand=True)

        snippets_list = []

        for snippet in snippets:
            abbreviation = snippet["abbreviation"];
            text_to_copy = snippet["text"];

            snippets_list.append(abbreviation)
            if len(text_to_copy) > 0:
                snippetsMap[abbreviation] = text_to_copy;
            else:
                template = snippet["template"];

                if len(template) > 0:
                    fo = open(full_path('snippets', template)).read()
                    snippetsMap[abbreviation] = fo;

        print(snippetsMap)

        snippets_var = tk.StringVar(value=snippets_list)

        listbox = tk.Listbox(
            root,
            listvariable=snippets_var,
            height=6,
            selectmode='SINGLE')

        listbox.pack(fill='x', expand=True)

        # handle event
        def items_selected(event):
            """ handle item selected event
            """
            # get selected indices
            selected_indices = listbox.curselection()
            # get selected items
            selected_langs = ",".join([listbox.get(i) for i in selected_indices])

            snippet_text.delete('1.0', "end")
            snippet_text.insert(tk.END, snippetsMap[selected_langs])

            abbreviation_entry.delete(0, "end")
            abbreviation_entry.insert(0, selected_langs)

        listbox.bind('<<ListboxSelect>>', items_selected)



def set_window_size():
    window_width = 500
    window_height = 400

    # get the screen dimension
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()

    # find the center point
    center_x = int(screen_width / 2 - window_width / 2)
    center_y = int(screen_height / 2 - window_height / 2)

    # return the position of the window to the center of the screen
    return f'{window_width}x{window_height}+{center_x}+{center_y}'

def save_button_clicked():
    print('Button clicked')


def remove_button_clicked():
    print('Button clicked')


def add_button_clicked():
    print('Button clicked')


def full_path(sub_folder, file_name):
    if getattr(sys, 'frozen', False):  # running in a bundle
        if len(sub_folder) > 0:
            dir_path = os.path.join(os.path.dirname(sys.executable), sub_folder)
        else:
            dir_path = os.path.dirname(sys.executable)
        return os.path.join(dir_path, file_name)
    else:  # running live
        if len(sub_folder) > 0:
            dir_path = os.path.join(os.path.dirname(__file__), sub_folder)
        else:
            dir_path = os.path.dirname(__file__)
        return os.path.join(dir_path, file_name)

def retrieve_db():
    with open(full_path('', 'db.json')) as settings_file:
        try:
            json_data = json.load(settings_file)
            return json_data
        except ValueError:
            print('The JSON File is missing or corrupted')
            sys.exit()

def add_hotkeys():
    for snippet in snippets:
        abbreviation = snippet["abbreviation"];
        text_to_copy = snippet["text"];

        if len(text_to_copy) > 0:
            keyboard.add_abbreviation(abbreviation, text_to_copy)
        else:
            template = snippet["template"];

            if len(template) > 0:
                fo = open(full_path('snippets',template)).read()
                keyboard.add_abbreviation(abbreviation, fo)

    print("Press ESC to stop.")
    keyboard.wait()

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    data = retrieve_db()
    snippets = data["snippets"]

    ##add_hotkeys();  ##TODO work run when window not minimized, add label that hotkeys are disabled when window is open

    root = tk.Tk()

    app = UI()


    root.mainloop()

